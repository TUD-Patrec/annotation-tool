name: Publish to Test-PyPI

on:
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
    inputs:
      ref:
        description: "Ref to run the workflow on"
        required: true
        type: string

  workflow_call:
    inputs:
      ref:
        required: true
        type: string

jobs:
  build-and-publish:
    runs-on: ubuntu-latest

    steps:
      - name: Check out repository
        uses: actions/checkout@v3
        with:
          ref: "${{ inputs.ref }}"

      - name: Set up python
        id: setup-python
        uses: actions/setup-python@v4
        with:
          python-version-file: '.python-version'

      - name: Install and configure Poetry
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Get poetry cache dir
        id: poetry-cache
        run: |
          echo "dir=$(poetry config cache-dir)" >> $GITHUB_OUTPUT

      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v3
        with:
          path: |
            ${{ steps.poetry-cache.outputs.dir }}
            .venv
            poetry.lock
          key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('pyproject.toml', 'poetry.lock') }}-publish

      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry install --no-interaction --no-root --without=dev

      - name: Install project
        run: poetry install --no-interaction --only-root

      - name: Add Test-PyPI repository to poetry config
        run: poetry config repositories.testpypi https://test.pypi.org/legacy/

      - name: Add Test-PyPI API token
        run: poetry config pypi-token.testpypi ${{ secrets.TESTPYPI_TOKEN }}

      - name: Build and publish package to Test-PyPI
        run: poetry publish --build -r testpypi