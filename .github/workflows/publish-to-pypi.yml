name: Publish to PyPI

on:
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
    inputs:
      ref:
        description: "Ref to run the workflow on"
        required: true
        type: string

jobs:
  build-and-publish:
    runs-on: ubuntu-latest

    # Do not run multiple runs of this workflow in parallel on the same ref
    concurrency:
      group: ${{ github.workflow }}-${{ github.ref }}

    steps:
      - name: Check out repository
        uses: actions/checkout@v3

      - name: Set up python
        id: setup-python
        uses: actions/setup-python@v3
        with:
          python-version: 3.8

      - name: Install and configure Poetry
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Get poetry cache dir
        id: poetry-cache
        run: |
          echo "dir=$(poetry config cache-dir)" >> $GITHUB_OUTPUT

      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v3
        with:
          path: |
            ${{ steps.poetry-cache.outputs.dir }}
            .venv
            poetry.lock
          key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('pyproject.toml', 'poetry.lock') }}

      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry install --no-interaction --no-root --without=dev

      - name: Install project
        run: poetry install --no-interaction

      - name: Lint with flake8
        run: |
          # stop the action if there are syntax errors or undefined variables
          poetry run flake8 annotation_tool main.py --select=E9,F63,F7,F82
          # treat all errors as warnings
          poetry run flake8 annotation_tool main.py --count --statistics

      - name: Check format with black
        run: poetry run black --check annotation_tool main.py

      - name: Check format with isort
        run: poetry run isort --check --settings-path pyproject.toml annotation_tool main.py

      - name: Add PyPI API token
        run: poetry config pypi-token.pypi ${{ secrets.PYPI_TOKEN }}

      - name: Build and publish package to PyPI
        run: poetry publish --build