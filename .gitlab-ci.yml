# This was in part taken from: https://gitlab.com/gitlab-org/gitlab/-/blob/master/lib/gitlab/ci/templates/Python.gitlab-ci.yml

image: python:3.9

.default_rules:
  master-version:
    - if: '$CI_COMMIT_TAG =~ /^v\d+\.\d+\.\d+([^-].*)?/'
  manual-version:
    - if: '$CI_COMMIT_TAG =~ /^v\d+\.\d+\.\d+-.*/'
      when: manual

.setup:
  script:
    - pip install --upgrade pip
    - pip install poetry
    - poetry config virtualenvs.create false
    - poetry install

.setup_win:
  script:
    - /usr/win64/bin/python -m pip install --upgrade pip
    - /usr/win64/bin/python -m pip install poetry
    - /usr/win64/bin/python -m poetry config virtualenvs.create false
    - /usr/win64/bin/python -m poetry install

.version_from_tag:
  script:
    - poetry version $( echo ${CI_COMMIT_TAG} | sed "s/^v//g" )

.version_from_tag_win:
  script:
    - /usr/win64/bin/poetry version $( echo ${CI_COMMIT_TAG} | sed "s/^v//g" )

.setup_pypi:
  script:
    - poetry config pypi-token.pypi ${PYPI_TOKEN}
    - !reference [.version_from_tag, script]

.setup_testpypi:
  script:
    - poetry config repositories.testpypi https://test.pypi.org/legacy/
    - poetry config pypi-token.testpypi ${TESTPYPI_TOKEN}
    - !reference [.version_from_tag, script]

before_script:
  - python --version  # For debugging

flake8 check:
  needs: []
  script:
    - !reference [.setup, script]
    - poetry run flake8 "${CI_PROJECT_DIR}" --count --statistics

black check:
  needs: []
  script:
    - !reference [.setup, script]
    - poetry run black --check "${CI_PROJECT_DIR}"

isort check:
  needs: []
  script:
    - !reference [.setup, script]
    - poetry run isort --check --settings-path pyproject.toml "${CI_PROJECT_DIR}"

publish pypi:
  needs: ["flake8 check", "black check", "isort check"]
  script:
    - !reference [.setup, script]
    - !reference [.setup_pypi, script]
    - poetry publish --build
  rules:
    - !reference [.default_rules, master-version]

publish testpypi:
  needs: ["flake8 check", "black check", "isort check"]
  script:
    - !reference [.setup, script]
    - !reference [.setup_testpypi, script]
    - poetry publish --build -r testpypi
  rules:
    - !reference [.default_rules, master-version]

publish testpypi manually:
  needs: []
  script:
    - !reference [.setup, script]
    - !reference [.setup_testpypi, script]
    - poetry publish --build -r testpypi
  rules:
    - !reference [.default_rules, manual-version]

build linux executable:
  needs: ["flake8 check", "black check", "isort check"]
  variables:
    SRCDIR: "$CI_PROJECT_DIR"
    PLATFORMS: "linux"
  image:
    name: fydeinc/pyinstaller
    entrypoint: ["/bin/sh", "-l", "-c"]
  script:
    - !reference [.setup, script]
    - !reference [.version_from_tag, script]
    - /entrypoint.sh --onefile --noconsole --name annotation-tool main.py
    - mv "dist/linux/annotation-tool" "${CI_PROJECT_DIR}/annotation-tool-linux"
    - 'if [[ ! -z "${OWNCLOUD_KEY}" ]]; then curl -k -T annotation-tool-linux -u "${SCIEBO_KEY}:${SCIEBO_PASSWORD}" -H "X-Requested-With: XMLHttpRequest" https://tu-dortmund.sciebo.de/public.php/webdav/annotation-tool-linux; fi'
  rules:
    - !reference [.default_rules, master-version]
    - !reference [.default_rules, manual-version]

build windows executable:
  needs: ["flake8 check", "black check", "isort check"]
  variables:
    SRCDIR: "$CI_PROJECT_DIR"
    PLATFORMS: "windows"
  image:
    name: fydeinc/pyinstaller
    entrypoint: ["/bin/sh", "-l", "-c"]
  script:
    - !reference [.setup_win, script]
    - !reference [.version_from_tag_win, script]
    - /entrypoint.sh --onefile --noconsole --name annotation-tool main.py
    - mv "dist/windows/annotation-tool.exe" "${CI_PROJECT_DIR}/annotation-tool-windows.exe"
    - 'if [[ ! -z "${OWNCLOUD_KEY}" ]]; then curl -k -T annotation-tool-windows.exe -u "${SCIEBO_KEY}:${SCIEBO_PASSWORD}" -H "X-Requested-With: XMLHttpRequest" https://tu-dortmund.sciebo.de/public.php/webdav/annotation-tool-windows.exe; fi'
  rules:
    - !reference [.default_rules, master-version]
    - !reference [.default_rules, manual-version]
